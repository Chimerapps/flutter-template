fastlane_version “2.93.1”
#require ‘java-properties’

# Don't generate README files.
skip_docs

# Install provisioning pro
install_provisioning_profiles

# Make sure all changes are committed.
before_all do |lane|
 clean_build_artifacts
end

keychain_password = ENV[‘JENKINS_KEYCHAIN_PASSWORD’]
unlock_keychain(path: ‘login.keychain’, password: keychain_password) if is_ci? && keychain_password
appcenter_app_name = ''

#####################
### CONFIGURATION ###
#####################

# Hockey configuration.
APPCENTER_API_KEY = '<enter-your-api-key>'
APPCENTER_ORGANIZATION_NAME = '<enter-your-organization>'
WORKSPACE = 'ios/Runner.xcworkspace'
BUILD_NR = ENV["BUILD_NUMBER"]

####################
### PUBLIC LANES ###
####################

lane :alpha_android do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  push_to_git_remote      # Push the changes to the origin.

  buildAppAndroid(flavor: 'alpha')
  upload_to_appcenter_android(flavor: 'alpha') # Deploy the apk to HockeyApp.
end

lane :beta_android do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  push_to_git_remote      # Push the changes to the origin.

  buildAppAndroid(flavor: 'beta')
  upload_to_appcenter_android(flavor: 'beta') # Deploy the apk to HockeyApp.
end

lane :prod_android do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  push_to_git_remote      # Push the changes to the origin.

  buildAppAndroid(flavor: 'prod')
  add_tag                 # Add tag
end

lane :alpha_ios do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  push_to_git_remote      # Push the changes to the origin.

  buildAppIOS(flavor: 'alpha')
  upload_to_appcenter_ios(flavor: 'alpha') # Deploy the apk to HockeyApp.
end

lane :beta_ios do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  push_to_git_remote      # Push the changes to the origin.

  buildAppIOS(flavor: 'alpha')
  upload_to_appcenter_ios(flavor: 'beta') # Deploy the apk to HockeyApp.
end

lane :prod_ios do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  push_to_git_remote      # Push the changes to the origin.

  buildAppIOS(flavor: 'prod')
  add_tag                 # Add tag
end

########################
###   PRIVATE LANES  ###
########################

private_lane :buildAppAndroid do |options|
    Dir.chdir ".." do
      sh("flutter", "packages", "get")
      sh("flutter", "clean")
      sh("flutter", "build", "apk", "--release", "--flavor", options[:flavor], "-t" "lib/main_#{options[:flavor]}.dart", "--build-number=#{BUILD_NR}")    # Build the application
    end
end

private_lane :buildAppIOS do |options|
    Dir.chdir ".." do
      sh("flutter", "packages", "get")
      sh("flutter", "clean")
      sh("flutter", "build", "ios", "--release", "--flavor", options[:flavor], "-t" "lib/main_#{options[:flavor]}.dart", "--no-codesign", "--build-number=#{BUILD_NR}")    # Build the application
      convertAppToIpa(flavor: options[:flavor])
    end
end

private_lane :convertAppToIpa do |options|
     Dir.chdir "ios" do
        gym(
            workspace: WORKSPACE,
            scheme: options[:flavor],
            configuration: "Release-#{options[:flavor]}",
            export_options: {
                method: "enterprise",
                provisioningProfiles: {
                    "com.icapps.flutterpoc.dev" => "Flutter POC Debug",
                    "com.icapps.flutterpoc.alpha" => "Flutter POC Alpha",
                    "com.icapps.flutterpoc.beta" => "Flutter POC Beta",
                    "com.icapps.flutterpoc" => "Flutter POC Production"
                }
            }
        )
    end
end
private_lane :upload_to_appcenter_android do |options|
  getAppNameAndroid(flavor: options[:flavor])
  appcenter_upload(
    api_token: APPCENTER_API_KEY,
    app_name: appcenter_app_name,
    owner_name: APPCENTER_ORGANIZATION_NAME,
    apk: "./build/app/outputs/apk/#{options[:flavor]}/release/app-#{options[:flavor]}-release.apk",
    notify_testers: true
  )
end

private_lane :upload_to_appcenter_ios do |options|
  getAppNameIOS(flavor: options[:flavor])
  appcenter_upload(
    api_token: APPCENTER_API_KEY,
    app_name: appcenter_app_name,
    owner_name: APPCENTER_ORGANIZATION_NAME,
    notify_testers: true
  )
end

private_lane :upload_to_appcenter_mac do |options|
  getAppNameIOS(flavor: options[:flavor])
  appcenter_upload(
    api_token: APPCENTER_API_KEY,
    app_name: appcenter_app_name,
    owner_name: APPCENTER_ORGANIZATION_NAME,
    notify_testers: true
  )
end

private_lane :add_tag do
  add_git_tag(
    prefix: "android/",
    build_number: BUILD_NR
  )
end

private_lane :getAppNameAndroid do |options|
    flavor = options[:flavor]
    if flavor == "alpha" &&
        appcenter_app_name = "Flutter-Template-Android-Alpha"
    elsif flavor == "beta"
        appcenter_app_name = "Flutter-Template-Android-Beta"
    elsif flavor == "prod"
        appcenter_app_name = "Flutter-Template-Android"
    end
end


private_lane :getAppNameIOS do |options|
    flavor = options[:flavor]
    if flavor == "alpha" &&
        appcenter_app_name = "Flutter-Template-iOS-Alpha"
    elsif flavor == "beta"
        appcenter_app_name = "Flutter-Template-iOS-Beta"
    elsif flavor == "prod"
        appcenter_app_name = "Flutter-Template-iOS"
    end
end